	class @@ElementName@@ : public qReal::ElementImpl {
	public:
	/*	void init(QRectF &, QList<StatPoint> &, QList<StatLine> &,
				qReal::LabelFactoryInterface &, QList<qReal::LabelFactoryInterface*> &,
				SdfRendererInterface *, SdfRendererInterface *) {}
	*/
		void init(QRectF &, PortFactoryInterface const &, QList<PortInterface *> &,
											qReal::LabelFactoryInterface &, QList<qReal::LabelInterface *> &,
											qReal::SdfRendererInterface *, qReal::ElementRepoInterface *) {}		

		void init(qReal::LabelFactoryInterface &factory, QList<qReal::LabelFactoryInterface*> &titles)
		{
@@EdgeInit@@
		}

		virtual ~@@ElementName@@() {}

		void paint(QPainter *, QRectF &){}
		bool isNode() const { return false; }
		bool isContainer() const { return false; }
		bool isSortingContainer() const { return false; }
                QVector<int> sizeOfForestalling() const { return QVector<int>(4, 0); }
		int sizeOfChildrenForestalling() const { return 0; }
		bool hasMovableChildren() const { return false; }
		bool minimizesToChildren() const { return false; }
	//	bool isClass() { return false; }
		bool maximizesChildren() const { return false; }
		bool isResizeable() const { return true; }
	//	int getPenWidth() const { return 1; }
	//	QColor getPenColor() const { return QColor(); }
		bool isDividable() const { return false; }


		qReal::ElementImpl *clone() { return NULL; }


		QList<double> border () const
		{
			QList<double> list;
			list << 0 << 0 << 0 << 0;
			return list;
		}
		
		
		int getPenWidth() const { return 1; }
//думаю, гдe color нужны @@		
		QColor getPenColor() const { return QColor(0,0,0); }


		Qt::PenStyle getPenStyle() const { return @@LineType@@; }
		QStringList bonusContextMenuFields() const
		{
			return QStringList();
		}

	protected:
		virtual void drawStartArrow(QPainter * painter) const 
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@BeginArrowBrushColor@@			
			painter->setBrush(brush);
@@BeginArrowCustomization@@
			painter->setBrush(old);
		}

		virtual void drawEndArrow(QPainter * painter) const
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@EndArrowBrushColor@@			
			painter->setBrush(brush);
@@EndArrowCustomization@@
			painter->setBrush(old);
		}

		void updateData(qReal::ElementRepoInterface *repo) const
		{
@@UpdateData@@
		}

	private:
//@@LabelDefinition@@
	};
